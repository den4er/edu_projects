'use strict';


const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');


class Workout // —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
{
    date = new Date();
    id = (Number(new Date()) + '').slice(-10); // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID

    constructor(coords, distance, duration)
    {
        this.coords = coords;
        this.distance = distance; // –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        this.duration = duration; // –≤ –º–∏–Ω—É—Ç–∞—Ö
    }

    _setDescription()
    {
        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        this.description = `${this.type.charAt(0).toUpperCase() + this.type.slice(1)} on
        ${this.date.getDate()} ${months[this.date.getMonth()]} ${this.date.getFullYear()} ${this.date.getHours()}:${this.date.getMinutes()}`

    }
}

class Running extends Workout // –¥–æ—á–µ—Ä–Ω–∏–π –∫–ª–∞—Å—Å –±–µ–≥
{
    type = 'running';

    constructor(coords, distance, duration, cadence)
    {
        super(coords, distance, duration);
        this.cadence = cadence;
        this.calcPace();
        this._setDescription();
    }

    calcPace()
    {
        this.pace = this.duration / this.distance; // –º–∏–Ω—É—Ç –Ω–∞ –∫–∏–ª–æ–º–µ—Ç—Ä
        return this.pace;
    }
}

class Cycling extends Workout // –¥–æ—á–µ—Ä–Ω–∏–π –∫–ª–∞—Å—Å –≤–µ–ª–æ—Å–∏–ø–µ–¥
{
    type = 'cycling';

    constructor(coords, distance, duration, elevationGain)
    {
        super(coords, distance, duration);
        this.elevationGain = elevationGain;
        this.calcSpeed();
        this._setDescription();
    }

    calcSpeed()
    {
        this.speed = this.distance / (this.duration / 60); // –∫–º –≤ —á–∞—Å
        return this.speed;
    }
}


class App // —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π, –∫–ª–∏–∫–∞–º–∏, —Ñ–æ—Ä–º–æ–π –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
{
    #map;
    #mapEvent;
    #mapZoomLevel = 13;
    #workouts = [];

    constructor()
    {
        this._getPosition(); // –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –∑–∞–ø—É—Å–∫ –∫–∞—Ä—Ç—ã
        this._getLocalStorage(); // –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

        inputType.addEventListener('change', this._toggleElevationField); // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤–∏–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        form.addEventListener('submit', this._newWorkout.bind(this)); // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        containerWorkouts.addEventListener('click', this._moveToPopup.bind(this)); // –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–ø–∞–ø—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    }

    _getPosition() // –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –∑–∞–ø—É—Å–∫ –∫–∞—Ä—Ç—ã
    { 
        if(navigator.geolocation)                      // –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã        // –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            navigator.geolocation.getCurrentPosition( this._loadMap.bind(this),  () => alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ') );
    }

    _loadMap(position) // –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É
    {
        const {latitude, longitude} = position.coords;

        this.#map = L.map('map').setView([latitude, longitude], this.#mapZoomLevel);// —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {   // openstreetmap
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(this.#map);

        // –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        this.#map.on('click', this._showForm.bind(this));

        this.#workouts.forEach( work => { // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ—Ç–æ–¥—É 
            this._renderWorkoutMarker(work); // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
        }); 
    }

    _showForm(mapE) // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    {
        this.#mapEvent = mapE; // –ø–æ–º–µ—â–∞–µ–º –≤ —Å–≤–æ–π—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∞ –æ–±—ä–µ–∫—Ç –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ. –≤ –Ω–µ–º –µ—Å—Ç—å —à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞
        form.classList.remove('hidden'); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        inputDistance.focus(); // —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    }

    _toggleElevationField() // –º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–≤–æ–¥–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    {
        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
    }

    _newWorkout(event) // –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    {
        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        const validInputs = (...inputs) => { // –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤, –ø—Ä–æ—Ö–æ–¥ –ø–æ –Ω–µ–º—É –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
            return inputs.every(input => Number.isFinite(input));
        }

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ > 0
        const isPositive = (...inputs) => {
            return inputs.every(input => input > 0);
        }

        event.preventDefault();// –æ—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã

        // –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        const type = inputType.value;
        const distance = Number(inputDistance.value);
        const duration = Number(inputDuration.value);
        let workout; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

        const {lat, lng} = this.#mapEvent.latlng; // –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞

        // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ 

        // –µ—Å–ª–∏ —ç—Ç–æ –±–µ–≥, —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Running
        if(type === 'running'){
            const cadence = Number(inputCadence.value);

            if(!validInputs(distance, duration, cadence) || !isPositive(distance, duration, cadence)) return alert('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
            workout = new Running([lat, lng], distance, duration, cadence);
        }

        // –µ—Å–ª–∏ —ç—Ç–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥, —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Cycling
        if(type === 'cycling'){
            const elevation = Number(inputElevation.value);

            if(!validInputs(distance, duration, elevation) || !isPositive(distance, duration)) return alert('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
            workout = new Cycling([lat, lng], distance, duration, elevation);
        }

        // –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ Workout
        this.#workouts.push(workout);


        // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
        this._renderWorkoutMarker(workout);


        // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        this._renderWorkout(workout);


        // —Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞
        this._hideForm();

        // –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        this._setLocalStorage();

    }


    _renderWorkoutMarker(workout) // –º–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    {       
        const workType = workout.type == 'running' ? `Cadence: ${workout.cadence} step/min` : `Elevation: ${workout.elevationGain} meters`
        const popupContent = `Distance: ${workout.distance} km, Duration: ${workout.duration} min, ${workType}`;

        L.marker(workout.coords) 
            .addTo(this.#map)
            .bindPopup(L.popup({maxWidth: 300, minWidth: 100, autoClose: false, closeOnClick: false, className: `${workout.type}-popup`}))
            .setPopupContent(popupContent)
            .openPopup();
    }


    _renderWorkout(workout)
    {
        const html = `
            <li class="workout workout--${workout.type}" data-id="${workout.id}">

            <h2 class="workout__title">${workout.description}</h2>

            <div class="workout__details">
                <span class="workout__icon">${workout.type == 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'}</span>
                <span class="workout__value">${workout.distance}</span>
                <span class="workout__unit">km</span>
            </div>
            <div class="workout__details">
                <span class="workout__icon">‚è±</span>
                <span class="workout__value">${workout.duration}</span>
                <span class="workout__unit">min</span>
            </div>
            <div class="workout__details">
                <span class="workout__icon">‚ö°Ô∏è</span>
                <span class="workout__value">${workout.type == 'running' ? workout.pace.toFixed(1) : workout.speed.toFixed(1)}</span>
                <span class="workout__unit">${workout.type == 'running' ? 'min/km' : 'km/h'}</span>
            </div>
            <div class="workout__details">
                <span class="workout__icon">${workout.type == 'running' ? 'ü¶∂üèº' : '‚õ∞'}</span>
                <span class="workout__value">${workout.type == 'running' ? workout.cadence : workout.elevationGain}</span>
                <span class="workout__unit">${workout.type == 'running' ? 'spm' : 'm'}</span>
            </div>
            </li>
        `;

        form.insertAdjacentHTML('afterend', html);
    }


    _hideForm() // —Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞
    {
        inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = '';
        form.style.display = 'none';
        form.classList.add('hidden');
        setTimeout(() => form.style.display = 'grid', 1000);
    }


    _moveToPopup(event) // –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–∞—Ä–∫–µ—Ä—É –Ω–∞ –∫–∞—Ä—Ç–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    {
        const workoutEl = event.target.closest('.workout'); // –ø–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è —Å –∫–ª–∞—Å—Å–æ–º workout
        if(!workoutEl) return; 

        const workout = this.#workouts.find(work => work.id == workoutEl.dataset.id);
        
        this.#map.setView(workout.coords, this.#mapZoomLevel, {
            animate: true,
            pan:{
                duration: 1,
            }
        });
    }

    _setLocalStorage() // –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    {
        console.log(JSON.stringify(this.#workouts));
        localStorage.setItem('workouts', JSON.stringify(this.#workouts)); // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –∫–ª–∞–¥–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    }

    _getLocalStorage() // –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    {
        const data = JSON.parce(localStorage.getItem('workouts')); // –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç
        console.log(data);

        if(!data) return; // –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ, –≤—ã—Ö–æ–¥–∏–º

        this.#workouts = data; // –ø–æ–º–µ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤
        
        this.#workouts.forEach( work => { // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ—Ç–æ–¥—É 
            this._renderWorkout(work);  // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
            this._renderWorkoutMarker(work); // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
        }); 
        
    }

}
const app = new App();